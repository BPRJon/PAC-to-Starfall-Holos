--@name Holo Creator V5
--@author jon b
--@server
--reccomend to use with PAC > E2 > SF Holo converter
--https://github.com/BPRJon/PAC-to-Starfall-Holos

maxquota = 0.6 --How much CPU quota the function can use. 1 is 100% quota .01 is 1% quota.
printdone = true --set to false if you dont want it to tell you when it is done loading
--default values
pos = Vector()
ang = Angle()
model = "models/balloons/balloon_dog.mdl"
scale = Vector(1)
--optional values
--anything here you can set to nil to skip
color = Color(255,0,0,255)
mat = ""
parent = nil --set this to either an entity, OR put the string name of a parent holo that is also in the CreationTable and it will be parentedmm
name = nil --a string to identify the holo as so it can be put in the Holos table. Also used to find the holo if another holo wants to parent to it
--[[
HOLO CLIPS
clips are created via the ClipTable, to use it you need to use {holo id,pos,normal}

holo id is the table index of the hologram you want to clip in the CreationTable
pos is the vector pos of the clip relative to the holo
normal is the vector normal of the clip relative to the holo
]]

Holos = {} -- <- dont touch this one
CreationTable = {
    --{pos,ang,model,scale,color,mat,parent,name}
}
ClipTable = {
    --{holo id,pos,normal}
}

function CreateHolos(holotbl,cliptbl)
    local holos = {}
    local holoindex = 0
    local clipindex = 1
    hook.add("tick","holo-creation-tick",function()
        while chip():getQuotaUsed() < chip():getQuotaMax()*maxquota and holoindex < table.count(holotbl) do
            holoindex = holoindex + 1
            local holodata = holotbl[holoindex]
            local clipdata = cliptbl[clipindex]
            local holo = hologram.create(holodata[1]+chip():getPos(),holodata[2],holodata[3],holodata[4])
            holos[table.count(holos)+1] = holo
            if holodata[5] ~= nil then
                holo:setColor(holodata[5])
            end
            if holodata[6] ~= nil then
                holo:setMaterial(holodata[6])
            end
            if holodata[7] ~= nil then
                if type(holodata[7]) == "string" then
                    holo:setParent(Holos[holodata[7]])
                else
                    holo:setParent(holodata[7])
                end
            end
            if holodata[8] ~= nil then
                Holos[holodata[8]] = holo
            end
            if clipdata[1] == holoindex then
                holos[clipdata[1]]:setClip(clipindex,true,clipdata[2],clipdata[3],holos[clipdata[1]])
                clipindex = clipindex + 1
            end
            if holoindex == table.count(holotbl) then
                hook.remove("tick","holo-creation-tick")
                print("Holos Created!")
            end
        end
    end)
end

CreateHolos(CreationTable,ClipTable)