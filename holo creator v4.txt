--@name Holo Creator V4
--@author jon b
--@server
--reccomend to use with PAC > E2 > SF Holo converter
--https://github.com/BPRJon/PAC-to-Starfall-Holos

--default values
pos = Vector()
ang = Angle()
model = "models/balloons/balloon_dog.mdl"
scale = Vector(1)
--optional values
--anything here you can set to nil to skip
color = Color(255,0,0,255)
mat = ""
parent = nil --set this to either an entity, OR put the string name of a parent holo that is also in the CreationTable and it will be parentedmm
name = nil --a string to identify the holo as so it can be put in the Holos table. Also used to find the holo if another holo wants to parent to it
--[[
HOLO CLIPS
clips are created via the ClipTable, to use it you need to use {holo id,pos,normal}

holo id is the table index of the hologram you want to clip in the CreationTable
pos is the vector pos of the clip
normal is the vector angle of the clip
]]

Holos = {} -- <- dont touch this one
CreationTable = {
    --{pos,ang,model,scale,color,mat,parent,name,clip}
}
ClipTable = {
    --{holo id,pos,normal}
}

function CreateHolos()
    local holos = {}
    holocreate = coroutine.create(function()
        for _,v in pairs(CreationTable) do
            local holo = hologram.create(v[1]+chip():getPos(),v[2],v[3],v[4])
            holos[table.count(holos)+1] = holo
            if v[5] ~= nil then
                holo:setColor(v[5])
            end
            if v[6] ~= nil then
                holo:setMaterial(v[6])
            end
            if v[7] ~= nil then
                if type(v[7]) == "string" then
                    holo:setParent(Holos[v[7]])
                else
                    holo:setParent(v[7])
                end
            end
            if v[8] ~= nil then
                Holos[v[8]] = holo
            end
            if v[9] ~= nil then
                holo:setClip(1,true,v[9][1],v[9][2],holo)
            end
            if chip():getQuotaUsed() > chip():getQuotaMax()*0.5 then
                coroutine.wait(1)
            end            
        end
        for i,v in pairs(ClipTable) do
            holos[v[1]]:setClip(i,true,v[2],v[3],holos[v[1]])
            if chip():getQuotaUsed() > chip():getQuotaMax()*0.5 then
                coroutine.wait(1)
            end
        end
        print("Holos Created!")
        hook.remove("tick","holo-anti-limiter")
    end)
    coroutine.resume(holocreate)
end

hook.add("tick","holo-anti-limiter", function()
    if coroutine.status(holocreate) == "suspended" then
        coroutine.resume(holocreate)
    end
    
end)

CreateHolos()